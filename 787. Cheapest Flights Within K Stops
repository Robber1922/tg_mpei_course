//https://leetcode.com/problems/cheapest-flights-within-k-stops/

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        unordered_map<int,unordered_map<int,int>> map; 
        vector<int> memory(n,INT_MAX); 
        for(vector V : flights) 
            map[V[0]][V[1]] = V[2];
        queue<pair<int,int>> myq; 
        int res = INT_MAX;
        myq.push(make_pair(src,0)); 
        K+=2;
        while(myq.size() && K--){
            int size = myq.size();
            for(int i = 0 ; i < size ; i++){
                auto q = myq.front();
                myq.pop();
                if(q.first == dst){ 
                    res = min(res,q.second);
                    continue;
                }
                for(auto it : map[q.first])
                    if(memory[it.first] > q.second+it.second){
                        memory[it.first] = q.second+it.second;
                        myq.push(make_pair(it.first,memory[it.first]));
                    }
            }
        }
        return (res == INT_MAX)?-1:res;
    }
};
